/* The following code was generated by JFlex 1.4.1 on 12/29/18 3:42 PM */

package org.search.app.model;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Kotlin programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>KotlinTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 1.0
 *
 */

public class KotlinTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\11\1\0\1\23\1\20\22\0\1\23\1\54\1\16"+
    "\1\21\1\22\1\53\1\57\1\10\2\101\1\25\1\46\1\45\1\34"+
    "\1\35\1\24\1\4\1\5\2\17\4\7\2\3\1\56\1\45\1\47"+
    "\1\50\1\52\1\55\1\100\1\6\1\27\1\6\1\71\1\33\1\32"+
    "\2\1\1\103\2\1\1\26\5\1\1\76\1\104\4\1\1\31\2\1"+
    "\1\101\1\12\1\101\1\51\1\2\1\0\1\41\1\30\1\65\1\63"+
    "\1\40\1\15\1\74\1\61\1\67\1\102\1\77\1\42\1\70\1\14"+
    "\1\62\1\64\1\1\1\37\1\43\1\36\1\13\1\73\1\72\1\66"+
    "\1\75\1\1\1\105\1\51\1\44\1\60\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\2\2\1\6"+
    "\1\1\1\7\2\10\4\2\1\10\6\2\1\11\1\2"+
    "\6\10\10\2\1\12\2\2\1\13\1\14\5\13\1\15"+
    "\10\13\1\16\3\13\1\1\2\17\1\20\1\3\1\17"+
    "\1\20\2\17\1\21\2\17\1\4\1\22\1\0\1\4"+
    "\5\2\2\6\1\23\1\24\1\25\13\2\1\26\10\2"+
    "\1\26\4\2\1\12\2\2\2\0\1\27\4\0\1\30"+
    "\2\0\1\31\22\0\1\1\1\3\1\20\1\0\2\21"+
    "\1\3\1\21\1\4\1\32\2\4\1\22\1\4\2\2"+
    "\1\6\1\33\1\6\1\34\31\2\1\1\1\35\1\2"+
    "\37\0\1\1\2\17\1\4\1\2\1\6\1\36\20\2"+
    "\1\1\2\0\1\37\2\0\1\40\10\0\1\41\17\0"+
    "\1\42\1\1\1\4\1\2\1\6\14\2\1\1\35\0"+
    "\1\1\1\4\1\2\1\6\1\2\1\43\5\2\1\1"+
    "\22\0\4\2\1\1\2\0\1\41\6\0\1\2\25\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u0276\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0276\0\u0276\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u0276\0\u08c0\0\u0906\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0276\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0276\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0276"+
    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u10ae\0\u10ae"+
    "\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324"+
    "\0\u0276\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e"+
    "\0\u1554\0\u159a\0\u0276\0\u0276\0\u15e0\0\u1626\0\u166c\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2"+
    "\0\u015e\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc"+
    "\0\u1d42\0\u1d88\0\u1dce\0\u0276\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6"+
    "\0\u0276\0\u1f2c\0\u1f72\0\u0276\0\u1fb8\0\u1ffe\0\u2044\0\u208a"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u10ae\0\u2602\0\u2648\0\u268e\0\u0276"+
    "\0\u26d4\0\u271a\0\u136a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u0276"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u2a62"+
    "\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92"+
    "\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u015e\0\u3020\0\u3066\0\u30ac"+
    "\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc"+
    "\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c"+
    "\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c"+
    "\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u2602\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u0276\0\u3a3e\0\u3a84\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u0276\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u45ba"+
    "\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4\0\u47ea"+
    "\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a"+
    "\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u3f70\0\u4c04"+
    "\0\u4042\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee"+
    "\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e"+
    "\0\u5064\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e"+
    "\0\u5294\0\u46d2\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u015e"+
    "\0\u5438\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622"+
    "\0\u5668\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852"+
    "\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82"+
    "\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2"+
    "\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2"+
    "\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086\0\u60cc\0\u6112"+
    "\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342"+
    "\0\u6388\0\u63ce\0\u6414\0\u645a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\7\1\6\1\7\1\11"+
    "\1\12\1\5\1\6\1\13\1\14\1\15\1\7\1\16"+
    "\1\5\1\6\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\6\1\25\1\6\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\6\1\34\1\35\1\36\1\37\1\21\1\40"+
    "\3\21\1\40\1\41\1\42\1\43\1\44\1\6\1\45"+
    "\1\46\1\47\1\50\1\6\1\51\1\6\1\52\1\53"+
    "\1\54\4\6\1\55\1\35\1\6\1\56\1\57\1\35"+
    "\11\60\1\61\3\60\1\62\7\60\1\63\33\60\1\64"+
    "\10\60\1\65\13\60\11\66\1\67\3\66\1\70\7\66"+
    "\1\71\21\66\1\72\11\66\1\73\10\66\1\74\5\66"+
    "\1\75\4\66\1\76\11\77\1\100\3\77\1\101\43\77"+
    "\1\102\10\77\1\103\13\77\10\5\2\0\4\5\1\0"+
    "\1\5\1\0\2\5\3\0\6\5\2\0\6\5\15\0"+
    "\20\5\1\0\3\5\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\2\105\1\106\3\7\1\105\1\7\2\0\3\105\1\107"+
    "\1\0\1\7\1\0\2\105\3\0\1\110\3\105\1\107"+
    "\1\111\1\0\1\112\2\105\1\111\1\105\1\110\1\105"+
    "\15\0\2\105\1\107\5\105\1\107\7\105\1\0\3\105"+
    "\1\0\2\105\1\113\1\114\2\115\1\105\1\115\2\0"+
    "\3\105\1\107\1\0\1\115\1\0\2\105\3\0\1\110"+
    "\2\116\1\117\1\107\1\111\1\0\1\112\2\105\1\111"+
    "\1\105\1\110\1\105\15\0\2\105\1\107\2\105\1\117"+
    "\2\105\1\107\7\105\1\0\3\105\1\0\10\120\1\121"+
    "\1\122\1\123\73\120\106\0\1\5\7\6\2\0\1\104"+
    "\1\124\2\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\1\125\2\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\126\2\6\15\0\1\6\1\127\4\6\1\130\10\6"+
    "\1\5\1\0\3\6\1\0\11\15\1\131\1\132\3\15"+
    "\1\133\67\15\23\0\1\17\106\0\1\134\1\135\22\0"+
    "\1\44\105\0\1\44\35\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\1\6\1\136\15\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\14\6\1\137\2\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\6\1\140\4\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\4\6\1\141\1\6\15\0\17\6"+
    "\1\5\1\0\3\6\35\0\1\44\13\0\1\44\1\0"+
    "\1\44\36\0\3\112\1\0\1\112\7\0\1\112\15\0"+
    "\1\44\50\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\6"+
    "\1\142\4\6\15\0\1\143\13\6\1\144\2\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\2\6\1\145\3\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\1\6\1\146\1\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\4\6\1\147\1\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\2\6\1\150\3\6\2\0"+
    "\5\6\1\151\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\1\152\2\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\17\6\1\5\1\0\3\6\47\0\1\44\1\0\1\44"+
    "\105\0\1\21\72\0\1\44\20\0\1\44\105\0\1\44"+
    "\77\0\1\44\6\0\1\44\26\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\2\6\1\153\3\6\2\0\6\6\15\0\12\6\1\154"+
    "\4\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\1\6\1\151\15\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\155\1\6\1\156\2\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\3\6\1\157\1\160\1\6\15\0\1\6\1\161\15\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\1\6\1\162\1\151\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\5\6\1\151\15\0\7\6\1\163"+
    "\7\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\1\6\1\164\15\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\15\0\1\165\16\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\166\2\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\2\167"+
    "\3\5\1\167\1\5\2\0\1\5\3\167\1\0\1\5"+
    "\1\0\1\5\1\167\3\0\6\167\2\0\6\167\15\0"+
    "\17\167\1\5\1\0\3\167\1\0\1\5\7\6\2\0"+
    "\1\104\1\6\1\170\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\15\0\1\171\16\6\1\5\1\0\3\6\1\0"+
    "\11\60\1\0\3\60\1\0\7\60\1\0\33\60\1\0"+
    "\10\60\1\0\13\60\36\0\1\172\30\0\1\173\42\0"+
    "\1\174\117\0\1\175\141\0\1\176\13\0\11\66\1\0"+
    "\3\66\1\0\7\66\1\0\21\66\1\0\11\66\1\0"+
    "\10\66\1\0\5\66\1\0\4\66\37\0\1\177\30\0"+
    "\1\200\42\0\1\201\62\0\1\202\4\0\1\202\4\0"+
    "\3\202\6\0\1\203\1\0\6\202\2\0\6\202\6\0"+
    "\1\204\6\0\17\202\2\0\3\202\37\0\1\205\141\0"+
    "\1\206\51\0\1\207\1\210\1\211\1\212\1\0\1\213"+
    "\16\0\1\214\1\215\1\216\1\217\1\0\1\220\3\0"+
    "\1\221\112\0\1\222\5\0\11\77\1\0\3\77\1\0"+
    "\43\77\1\0\10\77\1\0\13\77\36\0\1\223\30\0"+
    "\1\224\54\0\1\225\141\0\1\226\13\0\10\5\2\0"+
    "\1\5\1\227\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\6\5\2\0\6\5\15\0\20\5\1\0\3\5\1\0"+
    "\10\105\2\0\4\105\1\0\1\105\1\0\2\105\3\0"+
    "\6\105\2\0\6\105\15\0\20\105\1\0\3\105\1\0"+
    "\2\105\1\106\3\230\1\105\1\230\2\0\4\105\1\0"+
    "\1\230\1\0\2\105\3\0\6\105\2\0\6\105\15\0"+
    "\20\105\1\0\3\105\1\0\3\105\3\231\1\105\1\231"+
    "\2\0\4\105\1\0\1\231\1\0\2\105\3\0\6\105"+
    "\1\232\1\0\6\105\2\0\1\232\12\0\20\105\1\0"+
    "\3\105\1\0\3\105\3\112\1\105\1\112\2\0\3\105"+
    "\1\107\1\0\1\112\1\0\2\105\3\0\4\105\1\107"+
    "\1\111\2\0\2\105\1\111\3\105\15\0\2\105\1\107"+
    "\5\105\1\107\7\105\1\0\3\105\1\0\2\105\1\113"+
    "\1\105\2\233\1\105\1\233\2\0\4\105\1\0\1\233"+
    "\1\0\2\105\3\0\6\105\2\0\6\105\15\0\20\105"+
    "\1\0\3\105\1\0\3\105\3\114\1\105\1\114\2\0"+
    "\3\105\1\107\1\0\1\114\1\0\2\105\3\0\4\105"+
    "\1\107\1\111\1\0\1\112\2\105\1\111\3\105\15\0"+
    "\2\105\1\107\5\105\1\107\7\105\1\0\3\105\1\0"+
    "\2\105\1\113\1\114\2\115\1\105\1\115\2\0\3\105"+
    "\1\107\1\0\1\115\1\0\2\105\3\0\1\234\3\105"+
    "\1\107\1\111\1\0\1\112\2\105\1\111\1\105\1\234"+
    "\1\105\15\0\2\105\1\107\5\105\1\107\7\105\1\0"+
    "\3\105\1\0\4\105\2\235\2\105\2\0\4\105\1\0"+
    "\1\105\1\0\2\105\3\0\6\105\2\0\6\105\15\0"+
    "\20\105\1\0\3\105\1\0\3\105\5\236\2\0\3\105"+
    "\1\236\1\0\1\236\1\0\2\105\3\0\1\105\2\236"+
    "\1\105\2\236\2\0\2\105\2\236\2\105\15\0\2\105"+
    "\1\236\1\105\1\236\3\105\1\236\7\105\1\0\3\105"+
    "\1\0\10\237\1\240\1\0\74\237\10\0\1\240\75\0"+
    "\4\237\2\241\1\237\1\242\1\243\1\0\1\120\1\244"+
    "\3\120\1\241\10\237\1\120\5\237\2\120\46\237\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\4\6\1\245\1\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\1\6\1\151\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\4\6\1\147\1\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\6\1\151"+
    "\4\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\1\6\1\246\1\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\12\131\1\247\3\131"+
    "\1\250\73\131\2\15\1\131\2\15\1\0\1\15\1\251"+
    "\4\15\10\131\1\15\5\131\2\15\46\131\25\0\1\252"+
    "\60\0\1\5\7\6\2\0\1\104\1\6\1\253\1\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\254\5\6\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\2\6\1\255\3\6\15\0\17\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\1\6\1\256\15\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\1\257\2\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\14\6\1\151\2\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\6\1\260\4\6\15\0"+
    "\6\6\1\261\10\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\3\6\1\262"+
    "\13\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\263\5\6\15\0\17\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\1\264\2\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\5\6\1\257\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\5\6\1\265\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\3\6\1\266\13\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\17\6\1\5"+
    "\1\0\1\267\2\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\2\6\1\270\3\6\15\0\17\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\1\6\1\271\4\6\1\272\10\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\4\6\1\273\12\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\274\5\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\3\6\1\275\2\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\1\6"+
    "\1\276\1\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\7\6\1\277\7\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\300\5\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\15\0\3\6"+
    "\1\301\13\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\1\302\2\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\2\6\1\125\3\6\15\0\6\6\1\303\10\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\151\2\6\1\151\1\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\167\2\0\1\304\3\167"+
    "\1\0\1\167\1\0\1\5\1\167\3\0\6\167\2\0"+
    "\6\167\15\0\17\167\1\5\1\0\3\167\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\305\5\6\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\1\6\1\306\15\6\1\5\1\0"+
    "\3\6\65\0\1\307\63\0\1\310\101\0\1\311\141\0"+
    "\1\312\77\0\1\313\63\0\1\314\43\0\52\202\1\204"+
    "\33\202\1\0\1\202\4\0\1\202\4\0\3\202\10\0"+
    "\6\202\2\0\6\202\6\0\1\204\6\0\17\202\2\0"+
    "\3\202\37\0\1\315\141\0\1\316\26\0\1\317\45\0"+
    "\1\320\1\321\63\0\1\322\133\0\1\323\32\0\1\324"+
    "\132\0\1\325\26\0\1\326\46\0\1\327\115\0\1\330"+
    "\106\0\1\331\105\0\1\332\60\0\1\333\131\0\1\334"+
    "\107\0\1\335\20\0\1\336\1\0\1\337\1\0\1\340"+
    "\3\0\1\341\76\0\1\342\63\0\1\343\101\0\1\344"+
    "\141\0\1\345\13\0\3\5\5\346\2\0\3\5\1\346"+
    "\1\0\1\346\1\0\2\5\3\0\1\5\2\346\1\5"+
    "\2\346\2\0\2\5\2\346\2\5\15\0\2\5\1\346"+
    "\1\5\1\346\3\5\1\346\7\5\1\0\3\5\1\0"+
    "\2\105\1\106\3\230\1\105\1\230\2\0\4\105\1\0"+
    "\1\230\1\0\2\105\3\0\1\110\5\105\2\0\4\105"+
    "\1\110\1\105\15\0\20\105\1\0\3\105\1\0\3\105"+
    "\3\231\1\105\1\231\2\0\3\105\1\107\1\0\1\231"+
    "\1\0\2\105\3\0\4\105\1\107\1\105\2\0\6\105"+
    "\15\0\2\105\1\107\5\105\1\107\7\105\1\0\3\105"+
    "\4\0\3\231\1\0\1\231\7\0\1\231\66\0\2\105"+
    "\1\113\1\105\2\233\1\105\1\233\2\0\4\105\1\0"+
    "\1\233\1\0\2\105\3\0\1\234\5\105\2\0\4\105"+
    "\1\234\1\105\15\0\20\105\1\0\3\105\1\0\2\105"+
    "\1\347\1\105\2\235\2\105\2\0\4\105\1\0\1\105"+
    "\1\0\2\105\3\0\6\105\2\0\6\105\15\0\20\105"+
    "\1\0\3\105\1\0\2\105\1\350\5\236\2\0\3\105"+
    "\1\236\1\0\1\236\1\0\2\105\3\0\1\234\2\236"+
    "\1\105\2\236\2\0\2\105\2\236\1\234\1\105\15\0"+
    "\2\105\1\236\1\105\1\236\3\105\1\236\7\105\1\0"+
    "\3\105\1\0\10\237\1\121\1\0\100\237\2\242\1\237"+
    "\1\242\1\240\1\0\5\237\1\242\72\237\2\120\1\237"+
    "\1\120\1\240\1\0\5\237\1\120\71\237\5\351\1\121"+
    "\1\0\3\237\1\351\1\237\1\351\7\237\2\351\1\237"+
    "\2\351\4\237\2\351\21\237\1\351\1\237\1\351\3\237"+
    "\1\351\14\237\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\4\6"+
    "\1\151\1\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\352\2\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\11\131\1\0"+
    "\77\131\5\353\2\131\1\247\2\131\1\353\1\250\1\353"+
    "\7\131\2\353\1\131\2\353\4\131\2\353\21\131\1\353"+
    "\1\131\1\353\3\131\1\353\14\131\24\0\1\354\61\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\15\0\13\6"+
    "\1\305\3\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\2\6\1\305\3\6\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\3\6\1\355\2\6\15\0\17\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\170\2\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\2\6\1\151\3\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\15\0\1\6\1\356\15\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\5\6\1\151\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\2\6\1\357"+
    "\3\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\1\360\2\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\7\6\1\151\7\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\361"+
    "\5\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\127\3\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\362\3\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\363\4\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\364\5\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\15\0\12\6\1\365\4\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\16\6\1\366\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\4\6\1\367\12\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\5\6\1\261\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\370\5\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\3\6\1\371\13\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\372\3\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\1\6\1\373\15\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\2\6\1\374"+
    "\3\6\2\0\6\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\4\6\1\257"+
    "\1\6\15\0\17\6\1\5\1\0\3\6\1\0\10\5"+
    "\2\0\1\5\1\375\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\6\5\2\0\6\5\15\0\20\5\1\0\3\5"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\6\1\170"+
    "\4\6\15\0\17\6\1\5\1\0\3\6\57\0\1\376"+
    "\67\0\1\307\131\0\1\377\56\0\1\u0100\126\0\1\u0101"+
    "\67\0\1\313\131\0\1\u0102\56\0\1\u0103\106\0\1\u0104"+
    "\106\0\1\u0105\131\0\1\u0106\60\0\1\u0107\110\0\1\u0108"+
    "\23\0\1\u0109\56\0\1\u010a\106\0\1\u010b\1\u010c\61\0"+
    "\1\u010d\134\0\1\u010e\126\0\1\u010f\60\0\1\u0110\104\0"+
    "\1\u0111\105\0\1\u0112\24\0\1\u0113\61\0\1\u0114\135\0"+
    "\1\u0115\100\0\1\u0116\105\0\1\u0117\37\0\1\u0118\132\0"+
    "\1\u0119\122\0\1\u011a\67\0\1\342\131\0\1\u011b\56\0"+
    "\1\u011c\50\0\3\5\5\u011d\2\0\3\5\1\u011d\1\0"+
    "\1\u011d\1\0\2\5\3\0\1\5\2\u011d\1\5\2\u011d"+
    "\2\0\2\5\2\u011d\2\5\15\0\2\5\1\u011d\1\5"+
    "\1\u011d\3\5\1\u011d\7\5\1\0\3\5\1\0\2\105"+
    "\1\350\5\236\2\0\3\105\1\236\1\0\1\236\1\0"+
    "\2\105\3\0\1\105\2\236\1\105\2\236\2\0\2\105"+
    "\2\236\2\105\15\0\2\105\1\236\1\105\1\236\3\105"+
    "\1\236\7\105\1\0\3\105\1\0\3\237\5\u011e\1\121"+
    "\1\0\3\237\1\u011e\1\237\1\u011e\7\237\2\u011e\1\237"+
    "\2\u011e\4\237\2\u011e\21\237\1\u011e\1\237\1\u011e\3\237"+
    "\1\u011e\14\237\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\4\6"+
    "\1\u011f\1\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\3\131\5\u0120\2\131\1\247\2\131\1\u0120\1\250\1\u0120"+
    "\7\131\2\u0120\1\131\2\u0120\4\131\2\u0120\21\131\1\u0120"+
    "\1\131\1\u0120\3\131\1\u0120\14\131\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\16\6\1\151\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\11\6\1\151\5\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\u0121\2\6"+
    "\15\0\1\6\1\u0122\15\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\6\1\u0123\4\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\6\1\u0124\4\6\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\4\6\1\u0125\12\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\6"+
    "\1\u0126\4\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\2\6\1\u0127\3\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\3\6\1\u0128\2\6\15\0\17\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\3\6\1\u0129\2\6\15\0\17\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\1\151\16\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\6\6\1\u012a"+
    "\10\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\3\6\1\u012b\2\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\u012c\4\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\6\1\u0125"+
    "\4\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\4\6\1\254\1\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\3\5\5\u012d\2\0"+
    "\3\5\1\u012d\1\0\1\u012d\1\0\2\5\3\0\1\5"+
    "\2\u012d\1\5\2\u012d\2\0\2\5\2\u012d\2\5\15\0"+
    "\2\5\1\u012d\1\5\1\u012d\3\5\1\u012d\7\5\1\0"+
    "\3\5\25\0\1\u012e\124\0\1\307\12\0\1\376\30\0"+
    "\1\u0100\1\u012f\5\u0100\1\u012f\2\0\3\u0100\1\0\1\u0100"+
    "\1\0\1\u012f\1\u0100\1\0\1\u0100\1\u012f\6\u0100\2\u012f"+
    "\6\u0100\1\0\2\u012f\1\0\1\u012f\2\0\6\u012f\17\u0100"+
    "\2\u012f\3\u0100\25\0\1\u0130\124\0\1\313\12\0\1\u0101"+
    "\30\0\1\u0103\1\u0131\5\u0103\1\u0131\2\0\3\u0103\1\0"+
    "\1\u0103\1\0\1\u0131\1\u0103\1\0\1\u0103\1\u0131\6\u0103"+
    "\2\u0131\6\u0103\1\0\2\u0131\1\0\1\u0131\2\0\6\u0131"+
    "\17\u0103\2\u0131\3\u0103\63\0\1\u0132\63\0\1\u0133\21\0"+
    "\1\u0134\105\0\1\u010c\36\0\1\u0135\162\0\1\u0136\55\0"+
    "\1\u0137\1\0\1\u0138\124\0\1\u0139\113\0\1\u013a\103\0"+
    "\1\u013b\102\0\1\u013c\62\0\1\u013d\107\0\1\u013e\104\0"+
    "\1\u013f\105\0\1\u0140\105\0\1\u0141\110\0\1\u0142\56\0"+
    "\1\u0143\21\0\1\u0144\134\0\1\u0145\103\0\1\u0146\103\0"+
    "\1\u0147\66\0\1\u0148\67\0\1\u0149\124\0\1\342\12\0"+
    "\1\u011a\30\0\1\u011c\1\u014a\5\u011c\1\u014a\2\0\3\u011c"+
    "\1\0\1\u011c\1\0\1\u014a\1\u011c\1\0\1\u011c\1\u014a"+
    "\6\u011c\2\u014a\6\u011c\1\0\2\u014a\1\0\1\u014a\2\0"+
    "\6\u014a\17\u011c\2\u014a\3\u011c\1\0\3\5\5\u014b\2\0"+
    "\3\5\1\u014b\1\0\1\u014b\1\0\2\5\3\0\1\5"+
    "\2\u014b\1\5\2\u014b\2\0\2\5\2\u014b\2\5\15\0"+
    "\2\5\1\u014b\1\5\1\u014b\3\5\1\u014b\7\5\1\0"+
    "\3\5\1\0\3\237\5\u014c\1\121\1\0\3\237\1\u014c"+
    "\1\237\1\u014c\7\237\2\u014c\1\237\2\u014c\4\237\2\u014c"+
    "\21\237\1\u014c\1\237\1\u014c\3\237\1\u014c\14\237\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\4\6\1\u014d\1\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\3\131\5\u014e\2\131"+
    "\1\247\2\131\1\u014e\1\250\1\u014e\7\131\2\u014e\1\131"+
    "\2\u014e\4\131\2\u014e\21\131\1\u014e\1\131\1\u014e\3\131"+
    "\1\u014e\14\131\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\4\6"+
    "\1\u014f\1\6\15\0\17\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\2\6\1\151\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\1\6\1\u0150\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\3\6\1\362\2\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\151\5\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\1\5\7\6"+
    "\2\0\1\104\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\15\0\6\6\1\u0151\10\6"+
    "\1\5\1\0\3\6\1\0\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\4\6\1\u0152\12\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\1\257"+
    "\5\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\13\6\1\257"+
    "\3\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\1\6\1\u0153\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\15\0\17\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\1\6"+
    "\1\u0154\1\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\17\6\1\5\1\0\3\6"+
    "\1\0\1\5\7\6\2\0\1\104\2\6\1\u0155\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\3\5\5\u0156"+
    "\2\0\3\5\1\u0156\1\0\1\u0156\1\0\2\5\3\0"+
    "\1\5\2\u0156\1\5\2\u0156\2\0\2\5\2\u0156\2\5"+
    "\15\0\2\5\1\u0156\1\5\1\u0156\3\5\1\u0156\7\5"+
    "\1\0\3\5\25\0\1\u0100\105\0\1\u0103\120\0\1\u0157"+
    "\107\0\1\u0158\136\0\1\u0159\52\0\1\u015a\132\0\1\u015b"+
    "\105\0\1\u015c\34\0\1\u015d\154\0\1\u015e\64\0\1\u015f"+
    "\104\0\1\u010c\107\0\1\u0160\103\0\1\u0161\135\0\1\u010c"+
    "\111\0\1\u0162\50\0\1\u0163\134\0\1\u010c\106\0\1\u0164"+
    "\115\0\1\u0165\46\0\1\u0166\143\0\1\u0167\47\0\1\u0165"+
    "\105\0\1\u0168\60\0\1\u0146\116\0\1\u011c\61\0\3\5"+
    "\5\6\2\0\3\5\1\6\1\0\1\6\1\0\2\5"+
    "\3\0\1\5\2\6\1\5\2\6\2\0\2\5\2\6"+
    "\2\5\15\0\2\5\1\6\1\5\1\6\3\5\1\6"+
    "\7\5\1\0\3\5\1\0\3\237\5\120\1\121\1\0"+
    "\3\237\1\120\1\237\1\120\7\237\2\120\1\237\2\120"+
    "\4\237\2\120\21\237\1\120\1\237\1\120\3\237\1\120"+
    "\14\237\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\15\0"+
    "\14\6\1\151\2\6\1\5\1\0\3\6\1\0\3\131"+
    "\5\15\2\131\1\247\2\131\1\15\1\250\1\15\7\131"+
    "\2\15\1\131\2\15\4\131\2\15\21\131\1\15\1\131"+
    "\1\15\3\131\1\15\14\131\1\5\7\6\2\0\1\104"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\15\0\6\6\1\u0169\10\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\2\6\1\257\14\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\u016a\5\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\1\257\2\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\15\0\17\6\1\5\1\0"+
    "\3\6\1\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\6\6\1\u016b\10\6\1\5\1\0\3\6\1\0"+
    "\1\5\7\6\2\0\1\104\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\u016c\2\6"+
    "\15\0\17\6\1\5\1\0\3\6\1\0\3\5\5\u016d"+
    "\2\0\3\5\1\u016d\1\0\1\u016d\1\0\2\5\3\0"+
    "\1\5\2\u016d\1\5\2\u016d\2\0\2\5\2\u016d\2\5"+
    "\15\0\2\5\1\u016d\1\5\1\u016d\3\5\1\u016d\7\5"+
    "\1\0\3\5\70\0\1\u016e\101\0\1\u016f\65\0\1\u010c"+
    "\56\0\1\u010c\133\0\1\u013b\101\0\1\u0142\132\0\1\u013b"+
    "\61\0\1\u010c\110\0\1\u0170\103\0\1\u0171\132\0\1\u0172"+
    "\102\0\1\u0173\37\0\1\u016e\153\0\1\u015a\23\0\44\u0165"+
    "\1\u010c\41\u0165\37\0\1\u0174\130\0\1\u0175\62\0\1\u0176"+
    "\46\0\1\5\7\6\2\0\1\104\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\3\6\1\261"+
    "\2\6\15\0\17\6\1\5\1\0\3\6\1\0\1\5"+
    "\7\6\2\0\1\104\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\u0177\3\6\15\0"+
    "\17\6\1\5\1\0\3\6\1\0\1\5\7\6\2\0"+
    "\1\104\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\15\0\1\6\1\125\15\6\1\5"+
    "\1\0\3\6\1\0\1\5\7\6\2\0\1\104\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\15\0\4\6\1\257\12\6\1\5\1\0\3\6"+
    "\1\0\3\5\5\167\2\0\3\5\1\167\1\0\1\167"+
    "\1\0\2\5\3\0\1\5\2\167\1\5\2\167\2\0"+
    "\2\5\2\167\2\5\15\0\2\5\1\167\1\5\1\167"+
    "\3\5\1\167\7\5\1\0\3\5\42\0\1\u0178\107\0"+
    "\1\u0179\74\0\1\u017a\36\0\1\u017b\52\0\1\u013b\110\0"+
    "\1\u017c\103\0\1\u017d\107\0\1\u017e\126\0\1\u017f\112\0"+
    "\1\u0180\16\0\1\5\7\6\2\0\1\104\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\15\0\2\6\1\151\14\6\1\5\1\0\3\6\43\0"+
    "\1\u010c\104\0\1\u0181\133\0\1\u0182\57\0\1\u0183\102\0"+
    "\1\u0184\144\0\1\u010c\52\0\1\u0165\101\0\1\u0165\105\0"+
    "\1\u0185\64\0\1\u0186\130\0\1\u0187\103\0\1\u0188\107\0"+
    "\1\u0189\136\0\1\u018a\54\0\1\u018b\107\0\1\u0189\104\0"+
    "\1\u010c\127\0\1\u010c\104\0\1\u018c\61\0\1\u017d\134\0"+
    "\1\u0165\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\5\1\1\11\3\1\1\11\16\1\2\11\5\1"+
    "\1\11\14\1\1\11\5\1\1\11\10\1\1\11\20\1"+
    "\1\11\1\0\10\1\2\11\35\1\2\0\1\11\4\0"+
    "\1\11\2\0\1\11\22\0\3\1\1\0\5\1\1\11"+
    "\7\1\1\11\36\1\37\0\6\1\1\11\21\1\2\0"+
    "\1\1\2\0\1\1\10\0\1\11\17\0\22\1\35\0"+
    "\14\1\22\0\5\1\2\0\1\1\6\0\1\1\25\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public KotlinTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public KotlinTokenMaker(Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public KotlinTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token yylex() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 36: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 37: break;
        case 33: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 38: break;
        case 26: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 39: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 40: break;
        case 30: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 41: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 42: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 43: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 44: break;
        case 27: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 45: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 46: break;
        case 22: 
          { addToken(Token.RESERVED_WORD);
          }
        case 47: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 48: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 49: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 51: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 52: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 53: break;
        case 29: 
          { addToken(Token.DATA_TYPE);
          }
        case 54: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 55: break;
        case 18: 
          { addToken(Token.ERROR_CHAR);
          }
        case 56: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 57: break;
        case 10: 
          { addToken(Token.ANNOTATION);
          }
        case 58: break;
        case 28: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 59: break;
        case 19: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 60: break;
        case 34: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 61: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 62: break;
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 63: break;
        case 24: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 64: break;
        case 35: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 65: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 66: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 67: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 68: break;
        case 11: 
          { 
          }
        case 69: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 70: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 397: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 398: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 399: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 400: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
